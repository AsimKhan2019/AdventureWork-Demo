<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AffectedByN1Problem" xml:space="preserve">
    <value>Affected by N+1 Problem</value>
  </data>
  <data name="AllBikes" xml:space="preserve">
    <value>All Bikes</value>
  </data>
  <data name="AllProducts" xml:space="preserve">
    <value>All Products</value>
  </data>
  <data name="and" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>ORM Demo</value>
  </data>
  <data name="AvoidN1ProblemWithIncludes" xml:space="preserve">
    <value>Avoid N+1 Problem by using "Includes"</value>
  </data>
  <data name="BadPractiseForCheckingExistence" xml:space="preserve">
    <value>Affected by bad practice to check pre-existence of rows</value>
  </data>
  <data name="Bikes" xml:space="preserve">
    <value>Bikes</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="JamuroBlog" xml:space="preserve">
    <value>http://jamuro-blog.azurewebsites.net</value>
  </data>
  <data name="JamuroName" xml:space="preserve">
    <value>José A. Muro</value>
  </data>
  <data name="MostExpensiveBikes" xml:space="preserve">
    <value>Most Expensive Bikes</value>
  </data>
  <data name="NotAffectedForCheckingExistence" xml:space="preserve">
    <value>Not affected when checking pre-existence of rows</value>
  </data>
  <data name="NoTracking" xml:space="preserve">
    <value>No Tracking</value>
  </data>
  <data name="Number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="SelectOnlySqlEmployedFields" xml:space="preserve">
    <value>Select only SQL fields that are employed in business model</value>
  </data>
  <data name="SkipTracking" xml:space="preserve">
    <value>Skip Tracking</value>
  </data>
  <data name="WithIncludes" xml:space="preserve">
    <value>With Includes</value>
  </data>
  <data name="AllBikesWithCheckAllAnyTitle" xml:space="preserve">
    <value>All Bikes with check for existence by using Any() over all rows</value>
  </data>
  <data name="AllBikesWithCheckAllCountTitle" xml:space="preserve">
    <value>All Bikes with check for existence by using Count() over all rows</value>
  </data>
  <data name="AllBikesWithCheckOneTitle" xml:space="preserve">
    <value>All BIkes with check for existence by retrieving only one record</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="Waiting" xml:space="preserve">
    <value>Waiting</value>
  </data>
  <data name="OnlySpanishVersion" xml:space="preserve">
    <value>Only Spanish Version</value>
  </data>
  <data name="ApplicationSubtitle" xml:space="preserve">
    <value>Application demo by using SQL Server 2016 Adventure Works sample DB, MVC and EF.</value>
  </data>
  <data name="Background" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="ExternalTools" xml:space="preserve">
    <value>External Tools</value>
  </data>
  <data name="MoreResources" xml:space="preserve">
    <value>More Resources</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="Technologies" xml:space="preserve">
    <value>Technologies</value>
  </data>
  <data name="ElapsedTime" xml:space="preserve">
    <value>Tiempo de Ejecucion</value>
  </data>
  <data name="AddIncludes" xml:space="preserve">
    <value>With Includes</value>
  </data>
  <data name="AllBikesWithCheckAnyTitle" xml:space="preserve">
    <value>All Bikes with check for existence by using Any() with filter</value>
  </data>
  <data name="AllBikesWithCheckWIthExistsTitle" xml:space="preserve">
    <value>All Bikes with check for existence by using Exists()</value>
  </data>
  <data name="Bad" xml:space="preserve">
    <value>Bad</value>
  </data>
  <data name="Best" xml:space="preserve">
    <value>Best</value>
  </data>
  <data name="Good" xml:space="preserve">
    <value>Bien</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="N1Problem" xml:space="preserve">
    <value>N+1 Problem</value>
  </data>
  <data name="RestrictSQLFields" xml:space="preserve">
    <value>Restrict SQL Fields</value>
  </data>
  <data name="SQLIndexes" xml:space="preserve">
    <value>SQL Indexes</value>
  </data>
  <data name="SQLMonitorization" xml:space="preserve">
    <value>SQL Monitorization</value>
  </data>
  <data name="SQLQueryOptimization" xml:space="preserve">
    <value>SQL Query Optimization</value>
  </data>
  <data name="SQLResourceOptimization" xml:space="preserve">
    <value>SQL Resource Optimization</value>
  </data>
  <data name="Top10MostExpensiveBikes" xml:space="preserve">
    <value>Top 10 Most Expensive Bikes</value>
  </data>
  <data name="ShowHideDetails" xml:space="preserve">
    <value>Show/Hide Details</value>
  </data>
  <data name="SQLReturningOnlyTopBikes" xml:space="preserve">
    <value>SQL returning only top {0} bikes</value>
  </data>
  <data name="SQLTopMostExpensiveBikesBadMsg" xml:space="preserve">
    <value>Affected by bad SQL returning all products and then, filtering by {0} most expensive</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>For</value>
  </data>
  <data name="LinqImprovedByReturningSpecificSQLFields" xml:space="preserve">
    <value>We can still improve performance by enhancing Repositories or LINQ queries in order to return only specific required fields</value>
  </data>
  <data name="LinqOkButCanBeImproved" xml:space="preserve">
    <value>The LINQ query executed in this view is good enough but yet it can be improved</value>
  </data>
  <data name="LinqReturningAllSqlFields" xml:space="preserve">
    <value>The underlying SQL is returning all the fields for each SQL table</value>
  </data>
  <data name="MostExpensiveBikesForBadQueryStressComments" xml:space="preserve">
    <value>Results from LINQ query executed with "SQL Query Stress" tool over 100 iterations (filter by 10 most expensive bikes is not performed inside database)</value>
  </data>
  <data name="MostExpensiveBikesForGoodQueryStressComments" xml:space="preserve">
    <value>Results from LINQ query with "Top 10 injected in SQL" executed with "SQL Query Stress" tool over 100 iterations</value>
  </data>
  <data name="Therefore" xml:space="preserve">
    <value>Therefore</value>
  </data>
  <data name="AllImprovForBestQueryStressComments" xml:space="preserve">
    <value>Results from "Add Includes + No Tracking + Only Required fields" executed with "SQL Query Stress" tool over 100 iterations</value>
  </data>
  <data name="AllImprovForGoodQueryStressComments" xml:space="preserve">
    <value>Results from "Add Includes + No Tracking" executed with "SQL Query Stress" tool over 100 iterations</value>
  </data>
  <data name="Current" xml:space="preserve">
    <value>Actual</value>
  </data>
</root>